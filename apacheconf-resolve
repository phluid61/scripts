#!/usr/bin/env ruby
# vim: ts=2:sts=2:sw=2:expandtab

class Proc
  alias :<< :[]
end

if RUBY_VERSION.to_f < 1.9
  class << File
    alias :absolute_path :expand_path
  end
end

def is? o
  o && !o.empty?
end

$nesting = '    '
$server_root = nil
$show_includes = is?(ENV['QUIET']) ? false : true
$keep_comments = is?(ENV['COMMENTS'])
$macros = {}

def indent line, base, extra=0
  if extra && extra > 0
    base += ($nesting * extra)
  end
  "#{base}#{line}"
end

def parse_apacheconf str, fn, depth='', &block
  min_depth = 0
  local_depth = 0
  obj = ( block || [] )
  if $show_includes
    min_depth = 1
    local_depth = 1
    obj << indent("\#\# #{fn}", depth)
    obj << indent('#{', depth)
  end
  in_macro = nil
  str.gsub!(/\s*\\(\r?\n|\r)\s*/,' ') # line continuations
  str.each_line do |line|
    if $keep_comments
      line, comment = line.split '#', 2
      if comment
        comment.rstrip!
        comment = nil if comment.empty?
      end
    end
    line.gsub!(/#.*$/,'')
    line.strip!
    line.gsub!(/\s+/,' ')
    if comment
      if line.empty?
        whole_line = "\##{comment}"
      else
        whole_line = "#{line} \##{comment}"
      end
    else
      whole_line = line
    end
    if in_macro
      case line
      when ''
        # ignore blank line
        obj << indent(whole_line, depth, local_depth) if comment
      when %r(^</Macro>$)i
        obj << indent("\##{$nesting}...", depth, local_depth)
        obj << indent("\##{whole_line}", depth, local_depth)
        $macros[in_macro[:name]] = {
          :args => in_macro[:args],
          :body => in_macro[:body].join("\n"),
        }
        in_macro = nil
      else
        in_macro[:body] << whole_line
      end
    else
      case line
      when ''
        # ignore blank line
        obj << indent(whole_line, depth, local_depth) if comment
      when /^Include(?:Optional)? (\S+)$/i
        fn = $1
        if $show_includes
          obj << indent("\##{whole_line}", depth, local_depth)
          obj << indent("\#{", depth, local_depth)
          parse_apacheconf_file fn, indent($nesting,depth,local_depth), &block
          obj << indent("\#}", depth, local_depth)
        else
          parse_apacheconf_file fn, indent('',depth,local_depth), &block
        end
      when /^<Macro (\S+)(.*)>$/i
        obj << indent("\##{whole_line}", depth, local_depth)
        in_macro = {
          :name => $1.downcase,
          :args => $2.scan(/\$\S+/),
          :body => [],
        }
      when /^UndefMacro (\S+)$/i
        obj << indent("\##{whole_line}", depth, local_depth)
        $macros.delete $1.downcase
      when /^Use (\S+)(.*)$/i
        macro_name = $1.downcase
        macro_args = $2.scan(/\S+/)
        macro = $macros[macro_name]
        if macro
          rexp = []
          subs = {}
          macro[:args].each_with_index do |a,i|
            rexp << Regexp.escape(a)
            subs[a] = macro_args[i]
          end
          body = macro[:body].gsub /(#{rexp.join('|')})\b/i, subs
          if $show_includes
            obj << indent("\##{whole_line}", depth, local_depth)
            obj << indent("\#{", depth, local_depth)
            parse_apacheconf body, "Macro: #{macro_name}", indent($nesting,depth,local_depth), &block
            obj << indent("\#}", depth, local_depth)
          else
            parse_apacheconf body, '', indent('',depth,local_depth), &block
          end
        else
          obj << index("\#\#\# Use undefined macro #{macro.inspect}", depth)
        end
      when %r(<[^/])
        obj << indent(whole_line, depth, local_depth)
        local_depth += 1
      when %r(</)
        local_depth -= 1
        local_depth = min_depth if local_depth < min_depth
        obj << indent(whole_line, depth, local_depth)
      when /ServerRoot (\S+)$/i
        # FIXME: this should probably apply before any Includes
        $server_root = $1.gsub('"','')
        obj << indent(whole_line, depth, local_depth)
      else
        obj << indent(whole_line, depth, local_depth)
      end
    end
  end
  if $show_includes
    obj << indent('#}', depth)
  end
  block_given? ? nil : obj
end

def parse_apacheconf_file fn, depth='', &block
  fn += '*' if fn.end_with? '/'
  fn = File.absolute_path(fn, $server_root)
  if fn['*']
    Dir[fn].sort.each do |realfn|
      begin
        parse_apacheconf( File.open(realfn) {|fh| fh.read }, realfn, depth, &block )
      rescue => x
        block << indent("\#\#\# #{x}", depth) if block_given?
      end
    end
  else
    begin
      parse_apacheconf( File.open(fn) {|fh| fh.read }, fn, depth, &block )
    rescue => x
      block << indent("\#\#\# #{x}", depth) if block_given?
    end
  end
end

if ARGV.empty?
  possible_files = %w(
    /etc/apache2/apache2.conf
    /etc/httpd/conf/httpd.conf
    /opt/rh/httpd24/root/etc/httpd/conf/httpd.conf
  )
  $root_file = possible_files.find { |fn| File.exist? fn }
  raise 'No Apache httpd config file given' if !$root_file
elsif ARGV.first == '-'
  $server_root = Dir.pwd
  parse_apacheconf( STDIN.read, '-', '' ) {|line| puts line }
  exit
else
  $root_file = File.absolute_path(ARGV.first)
end
$server_root = File.dirname($root_file)

parse_apacheconf_file $root_file do |line|
  puts line
end

__END__

=head1 NAME

apacheconf-resolve - apache config resolver

=head1 SYNOPSIS

B<apacheconf-resolve> [I<filename>]

=head1 DESCRIPTION

Loads and minimally parses your apache conf. Reformats whitespace,
strips all comments and blank lines, and dereferences all C<Include>
directives.

If I<filename> is omitted, defaults to C</etc/apache2/apache2.conf>
or C</etc/httpd/conf/httpd.conf> if either of those files exist.

If I<filename> is a dash C<-> it reads the file contents from STDIN.

If the environment variable C<QUIET> is non-empty, doesn't add
comments for included files.

=cut

